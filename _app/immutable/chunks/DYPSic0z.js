import{t as d,a as o,e as te,s as x,f as M,c as D}from"./0qkRDtnx.js";import"./Dj97Lasw.js";import{k as O,p as ae,o as ne,g as h,s as p,f as oe,j as r,y as n,x as ie,t as v,w as C}from"./7WxwRe-N.js";import{p as F,i as u}from"./CWFxZYlJ.js";import{e as B,i as E,a as se,s as J}from"./DJysokEz.js";import{b as re}from"./3dgJX1K_.js";const R={title:"LLMs are making me a better engineer",description:"My experience with LLMs and why I think they are making me a better engineer",tags:["LLMs","engineering"],date:"2025-04-26"},{title:Se,description:Te,tags:Ce,date:qe}=R;var le=d(`<blockquote><p>TLDR: I find that instead of frustrating myself with a sequence of bad attempts by an LLM, a loop
of reading the output, stopping it immediately as I see something wrong or outside my preference,
and editing my original prompt until I get a consistent and quality output is letting me discover my
requirements in an incremental way, leading to quality code, technical writing, and output in
general. This also sharpens my thought process around
requirements. Additionally, having worked on LLM based systems in the past years, I am finding
myself saying things like “this —buzzword technology— is a worse —boring but stable
technology—”, and deeply thinking about incentives, entropy, and first principles problem solving
when communicating around engineering decisions about LLM based systems.
Altogether, to make useful LLM systems and to make LLMs I use useful, I find myself having to become
a better engineer.</p></blockquote> <h2 id="contents">Contents<a aria-hidden="true" tabindex="-1" href="#contents"><span class="anchor-link">#</span></a></h2> <ul><li><a href="#the-question">The Question</a></li> <li><a href="#why-riding-the-hype-wave-carefully-matters">Why riding the hype wave (carefully) matters</a></li> <li><a href="#ai-coding-removes-the-friction-of-starting-and-finishing-projects">AI coding removes the friction of starting and finishing projects</a></li> <li><a href="#the-vibe-coding-trap-more-projects-not-necessarily-better-skills">The “Vibe Coding” Trap: More Projects, Not Necessarily Better Skills</a> <ul><li><a href="#stop-and-regenerate-over-and-over-again">Stop and regenerate over and over again</a></li></ul></li> <li><a href="#recognize-the-artifact-and-try-to-get-it-right-in-one-prompt-not-the-first-one">Recognize the artifact, and try to get it right in one prompt (not the first one)</a></li> <li><a href="#thinking-about-llm-systems-and-trends-around-them">Thinking about LLM systems and trends around them</a></li> <li><a href="#so-are-llms-making-you-a-better-engineer">So, Are LLMs Making <em>You</em> a Better Engineer?</a></li></ul> <h2 id="the-question">The Question<a aria-hidden="true" tabindex="-1" href="#the-question"><span class="anchor-link">#</span></a></h2> <p>I know everyone is tired of hearing, talking, thinking, seeing, thinking, and hearing about AI and
LLMs and if they are good or not… so let me add to the pile.</p> <p>As someone who has paid a yearly subscription fee for Cursor, every time a new article comes out about <a href="https://lucianonooijen.com/blog/why-i-stopped-using-ai-code-editors/" rel="nofollow">people stopping using AI code editors</a>, <a href="https://aftermath.site/ai-video-game-development-art-vibe-coding-midjourney" rel="nofollow">AI being forced on workers who don’t want it</a>, or <a href="https://www.axios.com/2024/06/13/genai-code-mistakes-copilot-gemini-chatgpt?ref=wheresyoured.at" rel="nofollow">how bad AI generated code is</a>, I find myself asking the question: Am I using LLMs in a way beneficial to me? And when I say “beneficial”, I mean that in the most holistic sense, are they making me get more done in a sustainable way? Are they enabling me to do things I couldn’t (or wouldn’t)? Are they improving my skills for the long term? And after some consideration, I think the answer is that LLMs are making me (or forcing me to be) a better engineer.</p> <h2 id="why-riding-the-hype-wave-carefully-matters">Why riding the hype wave (carefully) matters<a aria-hidden="true" tabindex="-1" href="#why-riding-the-hype-wave-carefully-matters"><span class="anchor-link">#</span></a></h2> <p>Let me elaborate. Like many fresh out of the college engineers, I have been actively using and testing any new shiny AI tech that came out (from UI builders to AI native note taking apps to Shopping assistants) in the past 2-3 years. Unlike full-stack or FE engineers who were already tired by the new JS frameworks, or seasoned engineers who already know it’ll probably take a life time for a new tech to replace them and just don’t care, being a junior backend engineer, I had the capacity and will to keep an eye on trends and new technology no matter how overwhelming (approaching burn out soon).</p> <p>Which brings me to the first beneficial point of LLMs: they are the cutting edge, and <strong><em>it is
valuable to speak and think cutting edge</em></strong>. Yes, trend catching and switching frameworks and
applications every day is not sustainable or productive and it is tiring, really, really tiring.
When it comes to making a business or just building things, sticking with the tried and true, honing
your skills instead of jumping ship everyday is the way to go. But, I personally see a lot of value
in thinking about how I can use a new technology to solve an old problem, or even better, something
people don’t even recognize as a problem. Staying on the cutting edge pushes you to develop the
skills to distinguish <strong><em>what is air and what is impactful</em></strong>. It might be a healthier life to
assume any new thing that will be impactful will find its way to you in time, but most change is
derivative and even the slightest original good idea could shape the future of a new technology, or
present an opportunity you can’t find in another time. As an engineer, I find it extremely valuable
that I know what LLMs are actually good or bad at, and even more so that I can have strong opinions
about entire movements (please don’t build your system as multi agent). Most valuably, being on the
edge gives you a chance to identify what an industry might have misidentified and a chance to be the
one to fill the gap.</p> <h2 id="ai-coding-removes-the-friction-of-starting-and-finishing-projects">AI coding removes the friction of starting and finishing projects<a aria-hidden="true" tabindex="-1" href="#ai-coding-removes-the-friction-of-starting-and-finishing-projects"><span class="anchor-link">#</span></a></h2> <p>When it comes to using LLMs, I, like most people, started with the chat interfaces and gradually moved up to specialized systems like <a href="https://chef.convex.dev/" rel="nofollow">chef</a>, <a href="https://vetted.ai/" rel="nofollow">vetted.ai</a> (been using this since they were called Lustre), and AI coding IDEs like Cursor. Side note: I find it interesting and true to experience that Cursor lists ”<em>Cursor lets you breeze through changes by predicting your next edit</em>” as the first feature in their website, as I think that is the part I miss the most when I use a different editor.</p> <p>It took me quite a while to pull the trigger on Cursor, but I finally bought in for a year on
January. What convinced me was observing how AI coding just made me much more likely to start and
finish projects. I would get an idea like “I want to have an app to make hanging things easier and
why not learn 3D on the web on the way” to creating <a href="https://easy-hang.pages.dev/" rel="nofollow">EasyHang</a>,
creating a Slackbot for work that automates the process of deploying to staging by getting approvals
from everyone who has commits on the dev branch, or the website you are reading this on. What AI
Coding allowed me to do, was to turn on some lo-fi music, my walking pad, and just keep asking the
AI to fix things my way until things sort of worked. This workflow later got named “vibe coding”,
and it gets a bad rep, but the truth is that through vibe coding I got to create applications that I
wouldn’t have otherwise. It just made coding for myself, after coding for someone else for an 8 hour
workday, possible and fun.</p> <h2 id="the-vibe-coding-trap-more-projects-not-necessarily-better-skills">The “Vibe Coding” Trap: More Projects, Not Necessarily Better Skills<a aria-hidden="true" tabindex="-1" href="#the-vibe-coding-trap-more-projects-not-necessarily-better-skills"><span class="anchor-link">#</span></a></h2> <p>Just because AI coders made me code more doesn’t mean that they made me a better engineer. And in most of the above cases they didn’t. They made me happier, helped me create things that I will be adding to the “things I am proud of” in the <a href="https://yearcompass.com/" rel="nofollow">year compass</a> I will fill this year (did this section in the last year’s compass give me an existential crisis that lead to my yearly subscription to Cursor? We will never know), but I didn’t really “learn 3D on the web on the way”, I just used it.</p> <h3 id="stop-and-regenerate-over-and-over-again">Stop and regenerate over and over again<a aria-hidden="true" tabindex="-1" href="#stop-and-regenerate-over-and-over-again"><span class="anchor-link">#</span></a></h3> <p>This brings me to a revelation I had a few weeks ago using <a href="https://openwebui.com/" rel="nofollow">OpenWebUI</a> to talk to work allowed LLMs for writing an architectural proposal. I had already written my thoughts in freeform on why and when this architecture would be better, and why it fit our problem space. Unfortunately for me, arguments are better received when they have a certain structure and are accompanied by diagrams and examples, counter examples etc, so I turned to Claude for help.</p> <p>LLMs are notoriously <a href="https://en.wikipedia.org/wiki/AI_slop" rel="nofollow">bad at writing</a>, (<a href="https://eqbench.com/creative_writing.html" rel="nofollow">although maybe they are getting better</a>), so I wasn’t expecting much, and in the first iteration I got what I expected. What I didn’t expect was how impactful it was for me to stop the LLM’s response as soon as I saw something out of order, reword and add new requirements to my question and rerun the generation. Doing this a few turns, I ended up with a proposal with clear structure, short, to the point arguments, specific examples generated based on the context I provided, and helpful diagrams made with <a href="https://mermaid.js.org/" rel="nofollow">mermaid</a>. It even wrote things like</p> <blockquote><p><strong>The [x] approach doesn’t solve the [y] problem—it fragments it across multiple boundaries while adding communication complexity.</strong></p></blockquote> <p>Really understanding the core of my argument and distilling it into a direct point at the end of a
chapter. After a few manual edits, I published the proposal and even got some compliments on the
presentation. Even created a web version by asking the LLM to just make a single page HTML using
prebuilt components from a CDN and vanilla JS. The proposal would not have been close to what it is
if I hadn’t spent days writing and editing the free-form version, gathered context, and knew exactly
what I was trying to achieve, but the output of the LLM did teach me things. It showed me how I
could marry all the dispersed ideas I had into a coherent argument, and it wasn’t by letting the LLM
do what it wants, but by figuring out <strong><em>what I want</em></strong> through forcing myself to come up with the
requirements that would get the LLM to not generate slop. This might sound like a no-brainer, but I
think the easy thing and what most people do is to just write the next prompt correcting the mistakes the LLM made, that
leading to context overloading and even more mistakes, getting frustrated and concluding that LLMs
are terrible for the job at hand.</p> <h2 id="recognize-the-artifact-and-try-to-get-it-right-in-one-prompt-not-the-first-one">Recognize the artifact, and try to get it right in one prompt (not the first one)<a aria-hidden="true" tabindex="-1" href="#recognize-the-artifact-and-try-to-get-it-right-in-one-prompt-not-the-first-one"><span class="anchor-link">#</span></a></h2> <p>Nowadays, I use the same principle when coding with Cursor. I try to identify the “artifact” I would
like the AI to generate, and never let it generate a bad output in the first place. Just reword,
clarify, and restart until its 80% of the way there and do the same on improving the artifact
15% more (i.e. letting the LLM edit the first version repeatedly instead of going through
many, many versions and overwhelming the context), and finally manually edit the remaining 5%.</p> <p>Most LLM applications hope to get some predefined
rules to be enough for the LLM to gather or guess the requirements, but only you know what you want,
and until the LLMs become smarter than you, you have to steer the ship.</p> <h2 id="thinking-about-llm-systems-and-trends-around-them">Thinking about LLM systems and trends around them<a aria-hidden="true" tabindex="-1" href="#thinking-about-llm-systems-and-trends-around-them"><span class="anchor-link">#</span></a></h2> <p>There is a separate part of this argument, about how working on LLM systems and tech around them
also pushes me to think about the parallels between some fundamental software problems engineers
have been working on for decades and problems that the industry frames as new to sell useless tech.
And how important of a skill it is to be able to communicate these thoughts in a careful manner when
most people seem to disagree with you. But this probably warrants
a separate blog post.</p> <h2 id="so-are-llms-making-you-a-better-engineer">So, Are LLMs Making <em>You</em> a Better Engineer?<a aria-hidden="true" tabindex="-1" href="#so-are-llms-making-you-a-better-engineer"><span class="anchor-link">#</span></a></h2> <p>Thank you if you have read until this point, I am new to writing a blog so any feedback is more than welcome. What do you think about my argument? Do LLMs make you a better engineer?</p>`,1);function he(c){var i=le();O(50),o(c,i)}const de=Object.freeze(Object.defineProperty({__proto__:null,default:he,metadata:R},Symbol.toStringTag,{value:"Module"}));var ge=(c,i,s)=>ie(i,F(s())),ce=d("<button> </button>"),me=d('<a class="font-mono text-primary underline hover:text-accent transition-colors" target="_blank" rel="noopener noreferrer"> </a>'),ue=d('<div class="font-mono text-primary"> </div>'),pe=d('<div class="mt-1 text-xs text-muted-foreground"> </div>'),fe=d('<div class="mt-1 text-xs text-muted-foreground"> </div>'),ye=d('<div class="h-1 mt-2 bg-accent/10 rounded-full overflow-hidden"><div class="h-full bg-accent transition-all duration-500"></div></div>'),be=d('<div class="flex items-start gap-3 group"><div class="shrink-0 w-6 h-6 text-accent mt-1"><!></div> <div class="flex-1"><!> <!> <!> <!></div></div>'),we=d('<div class="terminal-block" data-variant="tip"><div class="flex flex-wrap gap-4 p-4 border-b border-accent/20"></div> <div class="grid grid-cols-1 md:grid-cols-2 gap-6 p-6"></div></div>');function N(c,i){ae(i,!0);let s=ne(F(i.categories[0].id));var g=we(),k=h(g);B(k,21,()=>i.categories,E,(f,a)=>{let y=()=>n(a).id,I=()=>n(a).label,j=()=>n(a).icon;var m=ce();m.__click=[ge,s,y];var A=h(m);r(m),v(()=>{se(m,`font-mono text-sm px-3 py-1 rounded-lg transition-all ${(n(s)===y()?"bg-accent/10 text-accent":"")??""}`),x(A,`${j()??""} ${I()??""}`)}),o(f,m)}),r(k);var L=p(k,2);B(L,21,()=>{var f;return(f=i.categories.find(a=>a.id===n(s)))==null?void 0:f.items},E,(f,a)=>{var y=be(),I=h(y),j=h(I);{var m=e=>{var t=M("✓");o(e,t)},A=e=>{var t=D(),l=C(t);{var S=b=>{var _=M("↻");o(b,_)},X=b=>{var _=D(),Z=C(_);{var $=w=>{var T=M("✗");o(w,T)},ee=w=>{var T=M("⌛");o(w,T)};u(Z,w=>{n(a).status==="cancelled"?w($):w(ee,!1)},!0)}o(b,_)};u(l,b=>{n(a).status==="in-progress"?b(S):b(X,!1)},!0)}o(e,t)};u(j,e=>{n(a).status==="completed"?e(m):e(A,!1)})}r(I);var q=p(I,2),W=h(q);{var U=e=>{var t=me(),l=h(t,!0);r(t),v(()=>{J(t,"href",n(a).link),x(l,n(a).title)}),o(e,t)},Y=e=>{var t=ue(),l=h(t,!0);r(t),v(()=>x(l,n(a).title)),o(e,t)};u(W,e=>{n(a).link?e(U):e(Y,!1)})}var P=p(W,2);{var V=e=>{var t=pe(),l=h(t,!0);r(t),v(()=>x(l,n(a).note)),o(e,t)};u(P,e=>{n(a).note&&e(V)})}var z=p(P,2);{var G=e=>{var t=fe(),l=h(t,!0);r(t),v(S=>x(l,S),[()=>new Date(n(a).completedDate).toLocaleDateString()]),o(e,t)};u(z,e=>{n(a).completedDate&&e(G)})}var Q=p(z,2);{var K=e=>{var t=ye(),l=h(t);r(t),v(()=>J(l,"style",`width: ${n(a).progress}%`)),o(e,t)};u(Q,e=>{n(a).status==="in-progress"&&n(a).progress&&e(K)})}r(q),r(y),o(f,y)}),r(L),r(g),o(c,g),oe()}te(["click"]);const H={title:"Six Years Later",description:"A reflection on personal growth and commitments",tags:["retrospective","personal-growth"],date:"2025-02-21"},{title:We,description:Pe,tags:ze,date:De}=H;var ve=d(`<p>My <a href="https://medium.com/@armanckeser/learning-as-a-part-of-daily-life-52ab1461a9b" rel="nofollow">latest public blog</a> was on February of 2019. That is 6 years to the dot. Seems only fitting to start a new blog
reflecting on the past years and on blogging itself.</p> <p>Firstly, I am glad to have marked my knowledge of the world and of my interests at a point in time
as well as having made it public. The writing pretty much sucks (this will too, probably), and it
makes me sad to not have kept up a consistent blog, but there is a certain charm in capturing your
thoughts (and by extension self) in the past, and also in public.</p> <p>It is a weird feeling, even though my principles haven’t changed much, I have spent a good chunk of
the last 6 years chipping away at problems of the world that bug me the most, challenging my
solution ideas with brilliant people, breaking them (and in turn myself) down and building them back
up again and again. I am proud to have kept my ideals and aspirations through the years while still
striving for learning as much as I can while being open minded. I don’t feel like I have changed,
but rather grown, and given that I had completely forgotten its existence before starting to work on
my updated site, reading it was like reading a stranger’s promises.</p> <p>Reading past aspirations or bucket lists can be daunting at times, but this one was a joy (still
cringe at times). Despite having forgotten its existence, maybe having written and promised this to
the world guided me subconsciously in the past 6 years, because I actually seem to have stuck to the
lists I have made and learned a good chunk of the things I have listed:</p> <!> <p>I seem to have dropped the ball when it comes to the piano pieces, and this reflection makes me want
to pick it back up (I did learn a lot of Ludovico Einaudi pieces and I even got to see him live!),
but one step at a time.</p> <h3 id="what-now">What Now?<a aria-hidden="true" tabindex="-1" href="#what-now"><span class="anchor-link">#</span></a></h3> <p>This reflection serves as both a checkpoint and a new starting line and betting on that writing goals
down and sharing them publicly might guide me subconsciously in the years to come, I would like to
commit to new things.</p> <p>My current focus mirrors three core themes from that original list:</p> <!> <p>Here’s to showing up consistently, embracing the cringe of public learning, and leaving better
breadcrumbs for future me.</p>`,1);function ke(c){var i=ve(),s=p(C(i),8);N(s,{categories:[{id:"books",label:"Library",icon:"📚",items:[{title:"1984 by George Orwell",status:"completed"},{title:"Brave New World by Aldous Huxley",status:"completed"},{title:"Crime and Punishment by Fyodor Dostoevsky",status:"completed",note:"Was my favorite book for a long time"},{title:"East of Eden by John Steinbeck",status:"completed",note:"Favorite book of all time right now. Just put the 34th chapter on my tombstone",link:"https://www.goodreads.com/review/show/2715195950"},{title:"Hakkari`de Bir Mevsim by Ferit Edgü",status:"completed"},{title:"Slaughterhouse 5 by Kurt Vonnegut",status:"completed"},{title:"The Communist Manifesto by Engels and Marx",status:"cancelled",notes:`Should read this sometime, it is supposed to be a short read and maybe one of the
        most influential writings of all time`},{title:"Anna Karenina by Leo Tolstoy",status:"cancelled",note:"Unbelievably, I read War and Peace instead..."}]},{id:"music",label:"Piano",icon:"🎹",items:[{title:"Nocturnes by Chopin",status:"cancelled"},{title:"Franz Liszt Works",status:"cancelled"},{title:"Fazıl Say Compositions",status:"cancelled"},{title:"Evgeny Grinko Pieces",status:"completed",note:"Learned Valse, Jane Maryam, and a few more",link:"https://www.youtube.com/watch?v=WlLgPys0TmI"},{title:"Yann Tiersen Pieces",status:"completed",note:"Comptine d'un autre ete"},{title:"Moonlight Sonata by Beethoven",status:"in-progress",progress:85,note:"I was really close to finishing this, but alas"}]},{id:"tech",label:"Code",icon:"⌨️",items:[{title:"React/JS/CSS(tailwind)",status:"completed",note:`I have been following the web space for some time. I am definitely no expert in React
        (or Svelte which this blog is written with), but know enough to make medium complexity sites`},{title:"Python/SQL",status:"completed",note:`Been working as a backend engineer for the past 4 years, focusing exclusively on
        Python frameworks and relational databases (Postgres)`}]}]});var g=p(s,10);N(g,{categories:[{id:"current",label:"Present Commitments",icon:"⚡",items:[{title:"Systems over goals",status:"in-progress",note:"Living a life through systems that will hopefully lead to a life to be proud of"},{title:"Open source contributions",status:"in-progress",note:`Being on H1B means that I can't focus on anything that would make money, which makes
        this a great time for making open-source contributions`,link:"/"},{title:"Writing",status:"in-progress",progress:1,note:"This blog being the first step"},{title:"Books",status:"in-progress",note:`I read (listened to) 16 books in 2024, mostly non-fiction. I would like to
        continue that trend and hopefully go up to 25 books this year`,progress:25/5}]}]}),O(2),o(c,i)}const Ie=Object.freeze(Object.defineProperty({__proto__:null,default:ke,metadata:H},Symbol.toStringTag,{value:"Module"}));function Be(){return Object.entries(Object.assign({"/src/content/writing/better-engineer.svx":de,"/src/content/writing/sixth-year.svx":Ie})).map(([i,s])=>{const g=i.replace("/src/content/","").replace(".svx","").split("/"),k=g[0],L=g[g.length-1];return{...s.metadata,slug:`${re}/${k}/${L}`}}).sort((i,s)=>new Date(s.date).getTime()-new Date(i.date).getTime())}export{de as _,Ie as a,Be as g};
