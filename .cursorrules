# Svelte 5 Development Guidelines (LLM-Optimized)

## 🧠 Core Principles
1. **LLM Directives**
   - ▲ Enforce pattern: "StrictTS > SvelteRunes > Tailwind > A11y"
   - ▼ Validate: File structure > Type imports > State > Markup
   - ◀ Prevent: Any Svelte 4 syntax, implicit any types, a11y violations
   - ▶ Require: JSDoc type hints for complex props, CSS scope isolation

2. **Svelte 5 LLM Patterns**
   - Use `$state`/`$derived` with type annotations: `let count = $state<number>(0)`
   - Event handlers: `onclick={handler}` not `on:click`
   - Snippet slots: `{@render children({ prop })}` over `<slot prop={value} />`
   - Effect tracking: `$effect(() => {...})` with cleanup functions
   - Custom elements: `<svelte:options customElement="my-component" />`

3. **TypeScript Enforcement**
   ```ts
   // LLM: ALWAYS use these patterns
   type Props = typeof $props<{
     user: User;
     disabled?: boolean;
   }>;
   
   interface ComponentAPI {
     update: (config: Partial<Config>) => void;
   }
   
   // LLM: Validate return types on exports
   export function createStore<T>(initial: T): Readable<T> {
     return $state(initial);
   }
   ```

## 📜 Component Structure
### LLM-Enforced Template
```svelte
<script lang="ts">
  // LLM: Import order strictness
  import type { User } from '$types';
  import { createEventDispatcher } from 'svelte';
  
  // LLM: Prop pattern (type first, default second)
  export let user: User = $state({ id: 0, name: '' });
  export let disabled = $state(false);
  
  // LLM: Event dispatch with type payloads
  const dispatch = createEventDispatcher<{
    login: { user: User };
    error: string;
  }>();
  
  // LLM: Derived state with explicit types
  const status = $derived<'active' | 'idle'>(
    disabled ? 'idle' : 'active'
  );
</script>

<!-- LLM: Enforce snippet usage -->
{@render heading({ class: 'text-xl' })}
  
<article class="component-base">
  <button
    onclick={handleClick}
    aria-disabled={disabled}
    class:disabled
    bind:this={buttonElement}
  >
    {user.name}
  </button>
</article>

<style>
  /* LLM: Always use :where() for scoping */
  :where(.component-base) button {
    transition: all 0.2s ease;
  }
</style>
```

## 🚀 Quality Enforcement
### LLM Validation Matrix
| Category       | Required                          | Forbidden                |
|----------------|-----------------------------------|--------------------------|
| **Types**      | Explicit generics                 | `any`, implicit `any`    |
| **Reactivity** | `$state`/`$derived`               | `let` without runes      |
| **Events**     | DOM attribute syntax             | `on:` directives         |
| **Styling**    | `:where()` scoping               | `!important` overrides  |
| **Markup**     | Semantic HTML elements           | `<div>` soup             |

### Performance Critical Path
1. **LLM: Auto-apply these optimizations**
   ```svelte
   <!-- Passive event listeners -->
   <div on:wheel|passive={handleScroll} />
   
   <!-- Lazy components -->
   {#if visible}
     {@render lazy(MyHeavyComponent)}
   {/if}
   
   <!-- Memoized calculations -->
   {@const memoized = $derived.by(expensiveCalculation(data))}
   ```

## 📝 Workflow Practices
1. **LLM Tooling Directives**
   ```bash
   # Always run these first:
   npx svelte-migrate@latest svelte-5
   npm install @sveltejs/llm@latest
   ```
   
2. **Validation Pipeline**
   ```
   [LLM] → [Svelte Compiler] → [TypeScript] → [ESLint] → [Accessibility Audit]
   ```

3. **Error Prevention Rules**
   - 🔴 Reject components without TypeScript props
   - 🟡 Warn on missing aria-* attributes
   - 🟢 Enforce Tailwind class ordering
   - 🔵 Require $effect cleanup functions

## ❓ LLM Uncertainty Protocol
1. **Fallback Patterns**
   ```svelte
   <!-- When unsure about reactivity: -->
   {@const safeValue = $derived(possiblyUndefined ?? defaultValue)}
   
   <!-- Type safety escape hatch: -->
   {$cast(someValue as unknown as TargetType)}
   ```

2. **Validation Checklist**
   - [ ] Verified DOM output via `svelte-check --dom`
   - [ ] Confirmed browser support matrix
   - [ ] Audited effect dependencies
   - [ ] Tested snippet slot fallbacks