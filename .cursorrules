# armanckeser-personal Code Standards (SvelteKit Blog)

## Philosophy
- **Code Quality**
  - Write deletable over extensible code
  - Components should do one thing well
  - Make implicit concepts explicit
  - Prefer composition over inheritance
  - Optimize for change
  - Self-documenting code through naming
  - Consistency over personal preference
  - Type-driven development patterns

## Svelte (v5+)
### State Management
- Use `$state<Type>` with explicit type annotations
- Initialize state at component top
- Derived values use `$derived`
- Side effects use `$effect` with cleanup
  - Explicit cleanup for DOM event listeners
  - Use `$effect.pre` for layout measurements
- Validate props early with clear errors
- Type props explicitly
- Document state machine transitions for complex components
- Use simple prop structures (no multi-concern props)
- Use `page` from `$app/state`, gives the same page context but is a $state() so you don't have to use $page.
- Always use closing tags for divs

### Event Handling
- Use `onclick={handler}` syntax
- Name handlers descriptively (`handleFormSubmit`)
- Place handlers after state, before effects
- Explicit event types (`e: MouseEvent`)
- Single-purpose handlers with clear names

### Component Structure
1. Type/Interface definitions
2. Prop declarations
3. State initialization
4. Derived values
5. Effects
6. Methods
7. Event handlers
- Separate sections with blank lines
- Group related logic together
- Add error boundary patterns
- Document technical debt in component metadata

## TypeScript
- Strict null checks
- No implicit `any`
- Explicit function return types
- Generic type constraints
- Discriminated unions for complex logic
- Descriptive type guards
- Import order: Types > Svelte > Components > Utils > Styles
- Use `satisfies` operator for complex type assertions
- Enforce `Readonly` for prop interfaces
- Type predicate functions for runtime validation

## Tailwind CSS
- Prefer direct utility classes
- Semantic color names
- Consistent spacing scale
- Class ordering:
  1. Layout
  2. Positioning
  3. Display
  4. Spacing
  5. Sizing
  6. Typography
  7. Colors
  8. Effects
- Mobile-first responsive design
- Avoid `!important` and custom CSS
- Use `max-` rules for responsive constraints
- Fluid typography with `clamp()` in custom CSS

## Accessibility
- Semantic HTML elements
- ARIA labels for interactions
  - `aria-live` regions for dynamic updates
  - Screen reader announcements for state changes
- Keyboard navigation support
- WCAG AA contrast ratios
- Screen reader-friendly content
- Accessible error messages
- Minimum 44px touch targets
- Meaningful alt text
- Landmark roles in layout components

## Performance
- `$derived.by()` for expensive ops
- Lazy load non-visible components
- Passive event listeners
- Virtual scrolling for lists
- Optimized image assets
- Route-based code splitting
- Track core web vitals
- Weak reference patterns for large datasets
- DOM reference cleanup patterns
- Memory leak prevention checks

## Documentation
- Component purpose description
- Prop table (name, type, default, desc)
- Usage examples
- Accessibility notes
- Performance considerations
- Known limitations
- Dependency list
- `@example` for complex utilities
- `@see` references for related components

## Debugging
- Component-prefixed console logs:
  - ðŸ”´ Error: `[Component] Message | data`
  - ðŸŸ¡ Warn: Potential issues
  - ðŸ”µ Info: State changes
  - ðŸŸ¢ Debug: Dev details
- Error boundaries with recovery
- Context-rich error logging
- Memory profiling patterns
- State transition logging


## Technical Debt Tracking
- Use `// TODO(username):` with ownership
- Component metadata tracking:
  ```svelte
  <!--
  TechnicalDebt:
    - [ ] ARIA-123: Improve keyboard nav
    - [ ] PERF-45: Optimize filtering
  -->
  ```
- Storybook-like debt documentation

## Code Review Guidelines
1. Accessibility Audit
   - Screen reader walkthrough
   - Keyboard-only operation
   - Contrast ratio verification

2. Performance Checklist
   - Memory leak check
   - Input lag measurement
   - Bundle size impact

3. Error Recovery
   - Boundary testing
   - Error message clarity
   - Fallback UI states

## AI Assistant Priorities
1. Correctness
2. Type Safety
3. Maintainability 
4. Performance
5. Accessibility